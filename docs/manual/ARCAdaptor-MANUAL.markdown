## Что это такое?


![ARCAdaptor - общий вид](images/image_0.png)

Плата ARCAdaptor — это основа для быстрого и простого создания
собственных [USB HID](http://ru.wikipedia.org/wiki/USB_HID) устройств. В
конфигурации по умолчанию ARCAdaptor не требует дополнительной настройки
и готов к использованию сразу после подключения к компьютеру.

ARCAdaptor базируется на популярном микроконтроллере ATMega8 и
фактически является конструктором для создания собственных
USB-устройств.

C помощью ARCAdaptor можно:

*   **Создавать** **собственные клавиатуры или джойстики** с помощью
    онлайн-редактора "прошивок".

*   **Использовать уже написанные "прошивки"**, совместимые
    с ARCAdaptor. С ним совместимы (проверено!) проекты PixelKit,
    4SNES4NES и USBJoy, позволяющие подключать к современному компьютеру
    или планшету геймпады от Dendy, Sega, Sony PlayStation.

*   Загружать в плату **программы-скетчи для Arduino** и запускать их.

*   Создавать собственные микропрограммы ("прошивки") для
    микроконтроллера ATmega8 и отлаживать их **без использования
    программатора**.

## Приступая к работе


### Комплект поставки

Плата поставляется в 3 вариантах:

*   **Собранное и готовое к работе устройство** с "прошивкой"
    по умолчанию.

*   **Набор деталей для самостоятельной сборки:** плата и детали, в том
    числе чистый микроконтроллер.

*   **Только плата (без деталей)** для самостоятельной комплектации
    и сборки.

Сборка и подготовка к работе описана в разделе [Самостоятельная сборка
ARCAdaptor](#самостоятельная-сборка-arcadaptor).

### Подключение устройства


ARCAdaptor подключается к USB-порту компьютера или даже планшета(\*) , и питается от этого же порта. Если используется микропрограмма ("прошивка") по
умолчанию, то никаких драйверов для работы не требуется.

**(\*) Примечание:** На планшете/телефоне требуется поддержка функции USB-host и поддержка HID-устройств. Большинство планшетов оснащены подобным функционалом.

На рисунке ниже показаны разъемы платы с обозначением контактов.

![Диаграмма ARCAdaptor](images/image_1.png)

<table>
<thead>
<tr>
<th>Контакт ARCAdaptor</th>
<th>№ контакта ATmega8</th>
<th>Наименование контакта</th>
<th>Комментарий</th>
</tr>
</thead>
<tbody>
<tr>
<td>X1</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>17</td>
<td>PB5 (SCK)</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>16</td>
<td>PB4 (MISO)</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>23</td>
<td>PC0 (ADC0)</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>24</td>
<td>PC1 (ADC1)</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>25</td>
<td>PC2 (ADC2)</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>26</td>
<td>PC3 (ADC3)</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>27</td>
<td>PC4 (ADC4/SDA)</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>28</td>
<td>PC5 (ADC5/SCL)</td>
<td></td>
</tr>
<tr>
<td>X2</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>11</td>
<td>PD7 (AIN1)</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>PD4 (XCK/T0)</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>12</td>
<td>PB0 (ICP)</td>
<td></td>
</tr>
<tr>
<td>6</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>10</td>
<td>PD6 (AIN0)</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>9</td>
<td>PD5 (T1)</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>11</td>
<td>13</td>
<td>PB1 (OC1A)</td>
<td></td>
</tr>
<tr>
<td>12</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>13</td>
<td>14</td>
<td>PB2 (SS/OC1B)</td>
<td></td>
</tr>
<tr>
<td>14</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>15</td>
<td>15</td>
<td>PB3 (MOSI/OC2)</td>
<td></td>
</tr>
<tr>
<td>X3</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>PD3 (INT1)</td>
<td>Режим PRG</td>
</tr>
<tr>
<td>2</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>31</td>
<td>PD1 (TXD)</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>29</td>
<td>PC6 (RESET)</td>
<td>Сброс</td>
</tr>
<tr>
<td>6</td>
<td>GND</td>
<td>Общий (земля)</td>
<td></td>
</tr>
<tr>
<td>7</td>
<td>GND</td>
<td>Общий (земля)*</td>
<td></td>
</tr>
<tr>
<td>8</td>
<td>GND</td>
<td>Общий (земля)*</td>
<td></td>
</tr>
<tr>
<td>9</td>
<td>VCC</td>
<td>+5V*</td>
<td></td>
</tr>
<tr>
<td>10</td>
<td>VCC</td>
<td>+5V*</td>
<td></td>
</tr>
</tbody>
</table>

**(\*) Примечание:** Контакты 7,8,9,10 разъема X3 целесообразно
использовать для питания платы без использования USB (автономные
устройства) и/или для питания подключаемых к ARCAdaptor устройств.

Подключение осуществляется с помощью стандартного кабеля USB-A – USB-B.

После автоконфигурации платы в системе появится 3 новых устройства –
клавиатура и 2 джойстика.

### Пример использования "прошивки" по умолчанию

"Прошивка" по умолчанию создана на основе проекта V-USB MAME Panel.
Автор: Andreas Oberdorfer, страница проекта находится
[здесь](http://vusb.wikidot.com/project:mamepanel).

Как сказано выше, после подключения ARCAdaptor к компьютеру, в системе
появится 3 новых устройства:

*   Клавиатура

*   Джойстик №1

*   Джойстик №2

![Диспетчер устройств после подключения ARCAdaptor с "прошивкой по
умлочанию"](images/image_2.png)

V-USB MAME Panel изначально задумывалась, как основа для создания
домашнего игрового автомата, работающего под управлением программы
MAME32. Привязка контактов ARCAdaptor выполнена исходя из этого замысла.

<table>
<thead>
<tr>
<th>Контакт ARCAdaptor</th>
<th>Обычный режим</th>
<th>Режим c включенным Shift</th>
</tr>
</thead>
<tbody>
<tr>
<td>X1</td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>JOYSTICK1 — UP</td>
<td>KEY_UpArrow</td>
</tr>
<tr>
<td>3</td>
<td>JOYSTICK1 — DOWN</td>
<td>KEY_DownArrow</td>
</tr>
<tr>
<td>5</td>
<td>JOYSTICK1 — LEFT</td>
<td>KEY_LeftArrow</td>
</tr>
<tr>
<td>7</td>
<td>JOYSTICK1 — RIGHT</td>
<td>KEY_RightArrow</td>
</tr>
<tr>
<td>9</td>
<td>JOYSTICK1 — BUTTON1</td>
<td>KEY_Enter</td>
</tr>
<tr>
<td>11</td>
<td>JOYSTICK1 — BUTTON2</td>
<td>KEY_Esc</td>
</tr>
<tr>
<td>13</td>
<td>JOYSTICK1 — BUTTON3</td>
<td>KEY_Tab</td>
</tr>
<tr>
<td>15</td>
<td>KEY &quot;1&quot;</td>
<td>KEY_P</td>
</tr>
<tr>
<td>X2</td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>JOYSTICK2 — UP</td>
<td>KEY_PageUp</td>
</tr>
<tr>
<td>3</td>
<td>JOYSTICK2 — DOWN</td>
<td>KEY_PageDown</td>
</tr>
<tr>
<td>5</td>
<td>JOYSTICK2 — LEFT</td>
<td>AC_VolumeDown</td>
</tr>
<tr>
<td>7</td>
<td>JOYSTICK2 — RIGHT</td>
<td>AC_VolumeUp</td>
</tr>
<tr>
<td>9</td>
<td>JOYSTICK2 — BUTTON1</td>
<td>KEY_F7</td>
</tr>
<tr>
<td>11</td>
<td>JOYSTICK2 — BUTTON2</td>
<td>KM_SHIFT_F7</td>
</tr>
<tr>
<td>13</td>
<td>JOYSTICK2 — BUTTON3</td>
<td>KM_ALT_F4</td>
</tr>
<tr>
<td>15</td>
<td>KEY &quot;2&quot;</td>
<td>AC_Mute</td>
</tr>
<tr>
<td>X3</td>
<td></td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>KEY_5/PRG (cointrigger)</td>
<td>KEY_5/PRG (cointrigger)</td>
</tr>
<tr>
<td>3</td>
<td>SHIFT</td>
<td>SHIFT</td>
</tr>
<tr>
<td>5</td>
<td>RESET</td>
<td>RESET</td>
</tr>
</tbody>
</table>

Некоторые пояснения. Служебный контакт SHIFT (см. таблицу контактов),
при замыкании на "землю" (GND), позволяет задействовать дополнительные
17 контактов. Например, если ряд контактов задействован для джойстика,
то при замкнутом SHIFT контакты уже работают как кнопки клавиатуры —
"стрелка вверх", "вниз", "влево", "вправо". Контакт COINTRIGGER может
работать для перевода устройства в режим программирования.

### Тестирование функциональности

Для получения представления, о том как всё это работает, выполним
простой опыт.

Понадобится два отрезка монтажного провода и обычная кнопка, работающая на
замыкание (хотя, можно обойтись и без неё). Выполните следующие
действия:

1.  Припаяйте отрезки провода к контактам кнопки и облудите или скрутите
    свободные концы провода, чтобы они не "лохматились" и
    беспрепятственно входили в разъём устройства.

    ![Подключение провода к ARCAdaptor](images/image_3.png)

2.  Один из отрезков провода вставьте в ряд контактов "земля" (чётный)
    разъема X1.

3.  Подключите устройство к компьютеру (второй отрезок все еще
    не подключен).

4.  Перейдите в режим тестирования джойстиков. Например для Windows 7
    или Windows 8 выполните следующую последовательность действий:
    Панель Инструментов → Устройства и принтеры. В окне появится список
    устройств, подключенных к компьютеру. Выберите "Arcadaptor 8" и
    кликните правой кнопкой мыши по значку (на нем
    изображена клавиатура).

    ![Параметры игровых устройств управления](images/image_4.png)

    ![Список подключенных джойстиков](images/image_5.png)

5.  Нажмите кнопку "Свойства". Появится окно тестирования и
    настройки джойстика.

6.  Поочередно замыкайте контакты нечетного ряда X1. На компьютере будет
    отображаться активность:

    ![Тестирование джойстика](images/image_6.png)

### Редактирование контактов

Оригинальная программа V-USB MAME Panel была изменена таким образом,
чтобы позволить назначать другие функции контактам ARCAdaptor. Так
например, вместо 2х джойстиков и клавиатуры можно использовать один
джойстик, но с 8 кнопками.

**Примечание: **в этом случае в системе по прежнему будет видно 2
джойстика, но задействован будет только один. Второй лишь "занимает
место".

Для изменения значений можно воспользоваться online-редактором,
находящимся по адресу: <http://adapto.rs/arc/editor/>.

#### Использование online-редактора

Редактор написан с использованием HTML5 и JavaScript и работает в
браузерах Google Chrome, Mozilla Firefox и Opera(*).

**(\*) Примечание:** Поддержка Opera
ограничена из-за особенностей реализации HTML5, но в целом все
работает.

Рабочая область редактора состоит из 2х частей — схематичного шаблонного
изображения клавиатуры и 2х джойстиков и набора контактов ARCAdaptor
(X1, X2 X3).

**Для назначения нового функционала** на контакт платы ARCAdaptor
**просто перетащите** кнопку экранной клавиатуры или джойстика на
желаемый контакт.

После этой операции отредактированный контакт примет новое значение и
будет "подсвечен".

Благодаря технологии HTML5 сохранение **значений происходит
автоматически**.

Когда редактирование закончено, необходимо скачать новый файл данных для
последующей загрузки значений в ARCAdaptor.

Для этого кликните по ссылке *Get EEPROM Image* и файл конфигурации
будет загружен на ваш компьютер.

После этого ARCAdaptor нужно перевести в [режим
программирования](#переход-в-режим-программирования-и-установка-драйверов-usbasp-для-windows) и загрузить новые значения
с помощью следующей команды:

`avrdude -p m8 -c usbasp -D -U eeprom:w:<имя_файла_конфигурации>`

Восстановить "заводские" значения можно кликнув по ссылке *Set default
values*.

#### Ручное редактирование контактов

Значения контактов можно изменить с помощью редактирования [исходного
текста](#ссылки) "прошивки" и последующей компиляции.
Путь к файлу конфигурации:

`FIRMWARE/eeprom/hid_eeprom.c`

В этой же папке находится **makefile**, рассчитанный на работу с
компилятором avr-gcc. Используйте его для адаптации к своей среде
разработки и компилятору.

## Пример: Подключаем джойстик от ZX-Spectrum к ARCAdaptor


У вас он наверняка есть, может быть даже с компьютером. Болтается
где-нибудь на балконе, антресолях или в гараже. Выглядел он, скорее
всего, вот так:

![Классический клон ZX-Spectrum](images/image_7.png)

Разъем DIN5, как правило имел следующую распайку — "колечко" — общий, а
5 контактов соответствовали сигналам "вверх", "вниз", "влево", "вправо"
и "огонь". Возьмите мультиметр и проверьте назначение контактов.

Предположим, вы получили вот такую картинку (*)
(не забудьте записать или зарисовать).

![Подключение джойстика к ZX-Spectrum](images/image_8.png)

**(\*) Примечание:** Используется скриншот
аутентичного руководства по эксплуатации советского клона ZX-Spectrum.

Отпаяйте или отрежьте контакт, соответствующий "общему". Подключите его
к чётному ряду контактов X1 или X2 — это сигнал GND.

Теперь поочередно отпаивайте или отрезайте старые контакты от разъёма
DIN5 и вставляйте их в соответствующие контакты разъёма X1 (или X2, если
хотите чтобы джойстик был "вторым" в системе).

В конечном итоге вы получите примерно такую картину:

![Подключение джойстика ZX-Spectrum к ARCAdaptor](images/image_9.png)

Решительно запускайте [режим тестирования джойстика в вашей операционной
системе](#тестирование-функциональности). Он должен "отзываться". Самое время
поставить какой-нибудь эмулятор ZX-Spectrum и вспомнить былые времена!

## Загрузка программ в ARCAdaptor


ARCAdaptor позволяет загружать в себя микропрограмму ("прошивку") без
использования дополнительных устройств благодаря программе-загрузчику,
который установлен в микроконтроллер на этапе изготовления устройства (\*).
Загрузчик, он же **bootloader** —
маленький участок программного кода, расположенный в специальной области
микросхемы. После сброса при выполнении некоторых условий эта программа
выполняется. В во всех остальных ("обычных") случаях стартует основная
"прошивка".

**(\*) Примечание:** В случае приобретения готовой платы. В других случаях загрузчик
устанавливается самостоятельно.

В качестве загрузчика для ARCAdaptor используется свободно
распространяемая программа
[USBAspLoader](http://www.obdev.at/products/vusb/usbasploader.html).

Кстати, именно использование загрузчика обеспечивает одну из ключевых
особенностей ARCAdaptor, а именно, работу с Arduino IDE.

### Avrdude

Для того, чтобы загрузить программу, или образ EEPROM в ARCAdaptor, на
компьютер нужно установить утилиту **avrdude**.

*   Для Windows — самый простой способ — установить пакет WinAVR, либо
    скачать отдельную сборку [в комплекте с
    драйверами](https://github.com/znoxx/ARCAdaptor/tree/master/tools/avrdude-windows).

*   Для Linux — установить соответствующий пакет.

*   Для MacOS X — воспользоваться пакетом MacPorts и установить
    **avrdude** с его помощью.

Если на компьютере установлен пакет Arduino IDE, то **avrdude**
установлен вместе с ним "автоматически".

Вызывать **avrdude** нужно с дополнительным параметром — указанием файла
конфигурации:

Для Windows:

`cd c:\arduino\hardware\tools\avr\bin`

`avrdude -C ..\etc\avrdude.conf -c usbasp -p atmega8 <остальные_команды>`

Для MacOS:

`cd /Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin`

`./avrdude -C ../etc/avrdude.conf -c usbasp -p atmega8 <остальные_команды>`

В операционных системах MacOS X и Linux дополнительные драйвера не
требуются. Для Windows же потребуется установка драйверов для USBAsp.

### Переход в режим программирования и установка драйверов USBAsp для Windows

Последовательность действий:

*   Скачайте и распакуйте драйвер USBAsp для Windows. Официальная
    [страничка
    здесь](http://www.protostack.com/blog/2011/05/usbasp-driver-for-windows-7-and-windows-vista-x64/),
    архив в комплекте с программой avrdude
    [тут](https://github.com/znoxx/ARCAdaptor/tree/master/tools/avrdude-windows).

*   Отключите ARCAdaptor от компьютера.

*   Замкните контакт PRG ([X3-1](#подключение-устройства)) с сигналом
    "GND" ([X3-2](#подключение-устройства)). Для замыкания лучше
    использовать скрепку или кусочек провода.

*   Зажмите кнопку "сброс" на устройстве.

*   В этом положении подключите устройство к компьютеру и отпустите
    кнопку "сброс"

*   Компьютер определит новое устройство USBAsp – для установки нужно
    воспользоваться скачанными ранее драйверами.

*   Теперь в устройство можно записывать новые "прошивки". Не размыкайте
    контакт PRG до окончания процесса программирования.

В Windows 8 работа драйвера USBAsp возможна только в **специальном
режиме** с **отключенной подписью драйверов**. Как в него перейти, можно
почитать по этой
[ссылке](http://www.craftedge.com/tutorials/driver_install_windows8/driver_install_win8.html).
К сожалению, каждый раз при перепрошивке устройства придется переходить
в этот режим. Хотя бы до того момента, пока авторы USBAsp не добудут
себе цифровую подпись.

### Команды загрузки программ в ARCAdaptor

Загрузить новый образ EEPROM (например, если вы создали новую
конфигурацию в онлайн-редакторе для дефолтной программы):

`avrdude -p m8 -c usbasp -D -U eeprom:w:<имя_файла_образа_eeprom>`

Заменить дефолтную программу на свою (размер программы не более 6144
байт):

`avrdude -p m8 -c usbasp -D -U flash:w:<имя_файла_прошивки>`

Записать программу и образ EEPROM за один проход (те же требования к
размеру программы):

`avrdude -p m8 -c usbasp -D -U flash:w:<имя_файла_прошивки> -U eeprom:w:<образ_eeprom>`

Осведомлённый пользователь в курсе, что помимо программ для
микроконтроллеров ATmega большую роль играют так называемые fuse-биты,
которые определяют режим работы микроконтроллера. Дефолтные значения для
них приведены ниже. **Мы не рекомендуем вам изменять их без
необходимости** или если вы не представляете, к чему это приведёт.

*   hfuse:0xc0

*   lfuse:w:0x9f

"Фузы" одинаковы как для загрузчика, так и для программы. Расшифровку
можно посмотреть по ссылке [AVR Fuse
Calculator](http://www.engbedded.com/fusecalc/).

### Разблокировка загрузчика

В поставляемом комплекте bootloader находится в состоянии locked, так
что при попытке его стирания будет выдаваться сообщение об ошибке. Это
сделано для того, чтобы сохранить работоспособность платы даже при
загрузке программы с ошибкой. Если вы все-таки решились пожертвовать им
(к примеру, вы гуру и 6 кб вам мало), нужно разблокировать bootloader.
Это делается следующей командой

`avrdude -p m8 -c <ваш_программатор> -U lock:w:0x3f:m`

## Использование других проектов с ARCAdaptor


ARCAdaptor базируется на типичном решении на микроконтроллере ATmega8 с
использованием библиотеки V-USB. Это автоматически дает возможность
использовать плату в качестве "базы" для других известных проектов. На
сегодняшний день протестированы следующие проекты:

*   Pixelkit (универсальное устройство для подключения джойстиков от
    Atari, NES (Dendy), Sega и других) (\*)

*   4SNES4NES (подключение до 4х джойстиков от NES или SNES)

*   USBJoy (подключение одного или двух джойстиков от Sony
    PlayStation 1)

**(\*) Примечание:**: Требуется небольшая доработка - подробности в соответствующем разделе.

Рассмотрим подключение каждого.

### Pixelkit

**Pixelkit** — замечательное устройство, сопрягающее джойстики "из 90ых"
— Sega, Dendy, Atari с реальностью 21 века — USB разъемом.

К недостаткам проекта можно отнести лишь то, что "каждому джойстику
нужна своя плата Pixelkit".

Оригинальная схема и руководстве по сборке
[здесь](https://github.com/atarity/pixelkit).

К сожалению, "в лоб" использовать прошивку от Pixelkit не получится, так
как она не помещается в отведенный объем. Поскольку исходные тексты
PixelKit открыты, мы внесли в них незначительную модификацию, которая
позволила уместить всю заявленную функциональность Pixelkit в доступную
память ARCAdaptor.

Скачать модифицированную версию программы Pixelkit можно
[отсюда](https://github.com/znoxx/ARCAdaptor/tree/master/projects/ARCAdaptor_pixelkit),
там же есть список внесенных изменений.

Pixelkit использует 9 контактов (c 1 по 9), а также 2 "джампера" -
переключателя режимов работы. На рисунке ниже — соответствие контактов
ARCAdaptor "терминам" Pixelkit.

![Коммутация ARCAdaptor при работе в режиме "Pixelkit"](images/image_10.png)

После загрузки программы, подключения джойстика и выставления нужной
конфигурации с помощью JP1 и JP2 устройство готово к работе. Для того,
чтобы не портить "аутентичность" старинных геймпадов — можно, например
приобрести разъемы DB9 и DB15 в магазине радиотоваров избежать
вандализма по отношению к геймпадам.

Загрузить прошивку и список изменений можно
[отсюда](https://github.com/znoxx/ARCAdaptor/tree/master/projects/ARCAdaptor_pixelkit),
оригинальная прошивка, схема и печатная плата доступны для загрузки
[здесь](https://code.google.com/p/pixel-kit/wiki/PixelkitMaking).

### 4NES4SNES

Автор 4NES4SNES — Raphaël Assénat. Сайт проекта находится по [этой
ссылке](http://www.raphnet.net/electronique/4nes4snes/index_en.php).
Благодаря 4SNES4NES можно подключить целых 4 джойстка к одному
ARCAdaptor. Этот проект, в отличие от Pixelkit, не требует никаких
доработок. Подключение очень простое, приведено ниже на рисунке.

![Коммутация ARCAdaptor при работе в режие 4NES4SNES](images/image_11.png)

Локальный архив проекта находится
[тут](https://github.com/znoxx/ARCAdaptor/tree/master/projects/Original-4NES4SNES).

### USBJoy

Проект позволяет подключить джойстики от Sony PlayStation 1. Особенно
отрадно, что работают даже аналоговые "стики". Микропрограмма
("прошивка"), опять-таки не требует изменений. В качестве рекомендации —
крайне желательно на контакт, требующий 3.5 вольта подавать именно 3.5
вольта, а не 5. Это можно сделать, соединив 2 диода последовательно,
впрочем это видно на схеме. Хотя китайским джойстикам все равно
(выяснилось в процессе тестирования, но не следует этим увлекаться).

**Примечание:** В оригинальном рисунке имеются ссылки на другие рисунки.
Их можно найти в архиве по ссылке, указанной ниже.

![Принципиальная схема подключения джойстика PSX к ATMega](images/image_12.png)

**Примечание:** Приведен пример подключения одного джойстика. Второй
подключается по аналогии, используя сигналы DAT2,CMD2, SEL2,CLK2.

![Коммутация ARCAdaptor в режиме USBJoy](images/image_13.png)

Внимательно изучите порядок контактов на разъема джойстика Sony
PlayStation!

Скачать оригинальный архив с прошивкой и схемой можно
[тут](http://www.radio.ru/archive/2007/01/a13.shtml). Или
воспользоваться
[зеркалом](https://github.com/znoxx/ARCAdaptor/tree/master/projects/Original-usbjoy).

### Прочие проекты

Практически любой проект для ATmega8, базирующийся на V-USB и
использующий скорость 12 Mhz может быть либо сразу загружен в
ARCAdaptor, либо перекомпилирован с минимальными изменениями. Без
изменений работают проекты, отвечающие следующим условиям:

*   используют внешний кварц на 12 мгц;

*   V-USB сконфигурировано для использования контактов PD0 для USB-, PD2
    для USB+;

*   имеют размер бинарного файла, не превышающий 6144 байт (8192-2048
    для bootloader) (\*);

*   используют совпадающие с нашими значения [fuse
    bits](#значения-fuse-битов-и-lock-битов).

При желании можно даже заменить кварцевый резонатор на другую частоту (если требуется).

**(\*) Примечание:** В случае, если бинарный файл прошивки
превышает этот объём, проблему можно решить путём отключения
загрузчика и освобождения отведённой под него памяти. Для загрузки
таких прошивок понадобится программатор.

Для проверки размера прошивки используйте команду
avr-size. Она поставляется в составе WinAVR (для Windows) и avr-утилит
для Linux и MacOS X.

`avr-size <имя_файла.hex>`

## Работа с Arduino IDE

ARCAdaptor можно использовать с Arduino IDE. Главное преимущество такого
подхода — вам не требуется специальных знаний языка C/C++, для того,
чтобы начать разработку собственных устройств! Да и загрузка собственных
программ в устройство имеет более дружественный интерфейс, чем командная
строка.

Перед началом работы нужно выполнить несколько простых действий по
настройке Arduino IDE для его работы с ARCAdaptor.

### Настройка Arduino IDE

Некоторые предварительные настройки:

*   Скачайте
    [настройки](https://github.com/znoxx/ARCAdaptor/tree/master/arduino/settings)
    и поместите их в папку Sketchbook (путь можно посмотреть в пункте
    меню File → Preferences Arduino IDE) (\*). Архив содержит
    версии для двух версий Arduino IDE — pre-1.5 (до 1.5) и 1.5. В
    зависимости от версии пути будут различаться. Так, для pre-1.5 путь
    выглядит так: Sketchbook/hardware/arcadaptor, а для 1.5.x —
    Sketchbook/hardware/arcadaptor/avr, где Sketchbook это путь к папке
    со скетчами.

*   После перезапуска Arduino IDE в меню Tools → Board должен появиться
    новый пункт: *ARCAdaptor w/ <ATmega8@12Mhz>*.

**(\*) Примечание:** Для операционных систем
Linux и MacOS X пути отличаются, но принцип тот же.

### Запуск первого скетча

Оригинальный Arduino, как правило, оснащен светодиодом-индикатором,
подключенным к контакту "digital pin 13" (см. [таблицу соответствия
контактов](#cоответствие-контактов-arcadaptor-с-atmega8-и-arduino)). Этот индикатор часто
используется в тестовых целях.

В ARCAdaptor никаких средств индикации не предусмотрено, но их можно
сделать самостоятельно за пару минут.

Для этого потребуется:

*   Светодиод, рассчитанный на напряжение 5 вольт.

*   Резистор на 100 Ом.

Соедините анод (+) диода с ножкой резистора (обычная скрутка). Вставьте
другую ножку резистора в гнездо X1-1, а катод (-) диода в X1-2.
Стандартный индикатор для Arduino готов.

**Примечание:** Как правило, ножка "анода" более длинная, если, конечно
вы не пользуетесь деталями бывшими в употреблении.

Выглядит вся конструкция приблизительно так:

![Подключение светодиода к ARCAdaptor](images/image_14.png)

Теперь можно переходить к прошивке "скетча".

*   В меню Tools→Board выберите ARCAdaptor.

    ![Выбор устройства в Arduino IDE](images/image_15.png)

*   Для загрузки скетча используйте режим программатора USBAsp.

    ![Выбор программатора в Arduino IDE](images/image_16.png)

*   Переведите ARCAdaptor в [режим программирования](#переход-в-режим-программирования-и-установка-драйверов-usbasp-для-windows).

*   Загрузите скетч в ARCAdaptor с помощью опции "*Загрузить через
    программатор*" ("*Upload using programmer*").

    ![Загрузка скетча Arduino через программатор](images/image_17.png)

*   Игнорируйте предупреждение при записи скетча в ARCAdaptor

    ![Предупреждения Arduino IDE при записи скетча](images/image_18.png)

### Ограничения при работе с Arduino IDE

Помните, что контакты digital pin 2, digital pin 0 зарезервированы, а
контакт digital pin 3 используется в качестве переключателя в режим
программирования. Эти нюансы следует иметь ввиду при использовании
ARCAdaptor в Arduino IDE. Другими словами - digital pin 2 и digital pin
0 не доступны в списке контактов, а digital pin 3 при его замыкании с
сигналом "земля" после сброса переведет ARCAdaptor в режим
программирования, и программа-скетч может не запуститься.

Также, размер скетча не должен превышать 6144 байт — это ограничение и
так прописано в конфигурационном файла, созданном при настройке Arduino
IDE, но в любом случае нужно об этом помнить.

### Cоответствие контактов ARCAdaptor с ATmega8 и Arduino

<table>
<thead>
<tr>
<th>Контакт ARCAdaptor</th>
<th>Контакт Arduino</th>
</tr>
</thead>
<tbody>
<tr>
<td>X1</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>digital pin 13</td>
</tr>
<tr>
<td>3</td>
<td>digital pin 12</td>
</tr>
<tr>
<td>5</td>
<td>analog input 0</td>
</tr>
<tr>
<td>7</td>
<td>analog input 1</td>
</tr>
<tr>
<td>9</td>
<td>analog input 2</td>
</tr>
<tr>
<td>11</td>
<td>analog input 3</td>
</tr>
<tr>
<td>13</td>
<td>analog input 4</td>
</tr>
<tr>
<td>15</td>
<td>analog input 5</td>
</tr>
<tr>
<td>X2</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>digital pin 7</td>
</tr>
<tr>
<td>3</td>
<td>digital pin 4</td>
</tr>
<tr>
<td>5</td>
<td>digital pin 8</td>
</tr>
<tr>
<td>7</td>
<td>digital pin 6</td>
</tr>
<tr>
<td>9</td>
<td>digital pin 5</td>
</tr>
<tr>
<td>11</td>
<td>digital pin 9 (PWM)</td>
</tr>
<tr>
<td>13</td>
<td>digital pin 10 (PWM)</td>
</tr>
<tr>
<td>15</td>
<td>digital pin 11 (PWM)</td>
</tr>
<tr>
<td>X3</td>
<td></td>
</tr>
<tr>
<td>1</td>
<td>digital pin 3</td>
</tr>
<tr>
<td>3</td>
<td>digital pin 1 (TX)</td>
</tr>
<tr>
<td>5</td>
<td>reset</td>
</tr>
</tbody>
</table>

## Использование в качестве отладочной платы


Плата спроектирована таким образом, что контакты X1, X2, X3 по шагу и
расположению совпадают с расположением контактов т.н. "слепыша" —
макетной платы.

![Установленная макетная плата для ARCAdaptor](images/image_19.png)

Это дает простор для проектирования собственных устройств, тем более что
для загрузки микропрограмм ("прошивок") в общем случае не требуется
программатор.

Изготовить плату расширения можно буквально за несколько минут.

### Детали

Потребуется обычный штыревой разъем с шагом 2.54 мм, а также подходящий
по размеру кусок макетной платы с шагом, опять-таки 2.54 мм.

![Начальная установка макетной платы на ARCAdaptor](images/image_20.png)

### Сборка

Вставьте контакты в разъемы и наденьте сверху макетную плату. Запаяйте
контакты на стороне макетной платы.

![Фиксация контактов макетной платы для ARCAdaptor](images/image_21.png)

Снимите макетную плату с запаянным разъемами.

![Вид собранной макетной платы для ARCAdaptor](images/image_22.png)

## Самостоятельная сборка ARCAdaptor

### Схема электрическая принципиальная

Схема выполнена в редакторе Eagle CAD.

![Схема ARCAdaptor](images/image_23.png)

Скачать файл формата .sch можно
[здесь](https://github.com/znoxx/ARCAdaptor/tree/master/hardware).

### Монтажная схема

Ниже приведено расположение элементов на плате.

![Монтажная схема ARCAdaptor](images/image_24.png)

### Перечень деталей

Ниже представлен список деталей для сборки проекта самостоятельно.

<table>
<thead>
<tr>
<th>Наименование</th>
<th>Обозначение</th>
<th>Номинал/название</th>
<th>Типоразмер</th>
</tr>
</thead>
<tbody>
<tr>
<td>Конденсатор</td>
<td>C1</td>
<td>22p</td>
<td>0805</td>
</tr>
<tr>
<td>Конденсатор</td>
<td>C2</td>
<td>22p</td>
<td>0805</td>
</tr>
<tr>
<td>Конденсатор</td>
<td>C3</td>
<td>100n</td>
<td>0805</td>
</tr>
<tr>
<td>Стабилитрон</td>
<td>D1</td>
<td>3.6v</td>
<td>SOT23</td>
</tr>
<tr>
<td>Стабилитрон</td>
<td>D2</td>
<td>3.6v</td>
<td>SOT23</td>
</tr>
<tr>
<td>Микросхема</td>
<td>IC1</td>
<td>Atmel ATmega8-AI</td>
<td>TQFP32-08</td>
</tr>
<tr>
<td>Резистор</td>
<td>R1</td>
<td>68</td>
<td>0805</td>
</tr>
<tr>
<td>Резистор</td>
<td>R2</td>
<td>68</td>
<td>0805</td>
</tr>
<tr>
<td>Резистор</td>
<td>R3</td>
<td>1K5</td>
<td>0805</td>
</tr>
<tr>
<td>Кнопка тактовая</td>
<td>S1</td>
<td>SMD</td>
<td></td>
</tr>
<tr>
<td>Разъем USB</td>
<td>USB1</td>
<td>USB-B розетка</td>
<td>На плату</td>
</tr>
<tr>
<td>Разъем</td>
<td>X1</td>
<td>MA08-2</td>
<td>Двухрядный,шаг 2.54 мм</td>
</tr>
<tr>
<td>Разъем</td>
<td>X2</td>
<td>MA08-2</td>
<td>Двухрядный,шаг 2.54 мм</td>
</tr>
<tr>
<td>Разъем</td>
<td>X3</td>
<td>MA05-2</td>
<td>Двухрядный,шаг 2.54 мм</td>
</tr>
<tr>
<td>Кварц</td>
<td>12 Mhz</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

### Рекомендации по сборке

Плата ARCAdaptor рассчитана на использование SMD-деталей. Пайка SMD в
домашних условиях — процесс требующий некоторой сноровки.

Для сборки в домашних условиях понадобятся:

*  паяльник с тонким жалом и, желательно, регулировкой температуры;

*   пинцет;

*   флюс для пайки (жидкий или гель);

*   припой;

*   мультиметр для проверки замыканий;

*   терпение и усидчивость.

Сборку лучше начинать с установки центральной микросхемы. Нанесите
небольшое количество флюса на посадочные места и расположите микросхему
на контактных площадках. Следите, чтобы не было перекосов.

Прижмите центральную часть микросхемы пинцетом или шилом — тут главное,
чтобы она не сдвинулась с посадочного места во время пайки.

Далее пропаяйте несколько ножек с каждой стороны. Когда микросхема будет
закреплена, можно убрать пинцет и продолжить пайку.

Если возникло "залипание" припоя между ножками — не паникуйте. Просто
капните некоторое количество жидкого флюса и прогрейте это место
паяльником. Капля припоя рассосется.

Остальные мелкие детали запаиваются аналогично.

После этого можно устанавливать крупные разъемы и запаивать их. При
желании разъемы X1, X2, X3 можно заменить на "вилку" или не запаивать
вообще.

После этого промойте плату в спирте и высушите — не используйте батарею
отопления или фен. Если хотите ускорить процесс — положите плату на
кинескопный телевизор (тепло от кинескопа высушит плату быстрее), а
лучше просто дайте высохнуть самостоятельно. После этого старой зубной
щеткой очистите плату от остатков флюса, не удалённых спиртом.

#### Если что-то пошло не так

*   Проверьте правильность установки деталей.

*   Проверьте, нет ли замыканий.

*   Проверьте, пропаяны ли все ножки микросхемы. Для этого установите
    один щуп мультиметра на основание ножки (там, где она "выходит" из
    корпуса микросхемы), а вторым на дорожку, куда микросхема припаяна —
    скорее всего там будет некоторое количество места, не
    занимаемого ножкой. Мультиметр должен показать наличие контакта.
    Если этого не произошло - капните небольшое количество флюса в эту
    точку и прогрейте ножку микросхемы паяльником с тонким жалом. Можно
    добавить немного припоя.

## Установка загрузчика (bootloader) и микропрограммы ("прошивки") по умолчанию

Для установки загрузчика и дефолтной "прошивки" понадобится
программатор. Можно воспользоваться любым устройством, поддерживающим
внутрисхемное программирование микросхем Atmel по протоколу ISP.

Расположение контактов для программирования показано на рисунке ниже.

![Контакты ARCAdaptor для подключения программатора](images/image_25.png)

Пример установки загрузчика с помощью программы **avrdude** и
программатора **usbtiny**.

`avrdude -c usbtiny -p atmega8 -U flash:w:main.hex:i`

`avrdude -c usbtiny -p atmega8 -U hfuse:w:0xc0:m -U lfuse:w:0x9f:m`

`avrdude -c usbtiny -p atmega8 -U lock:w:0x0f:m`

#### Значения fuse-битов и lock-битов

*   hfuse: 0xc0

*   lfuse: 0x9f

*   lock: 0x0f

Лок-биты требуются для защиты загрузчика от затирания. Для разблокировки
загрузчика используйте инструкцию из [соответствующего
раздела](#разблокировка-загрузчика).

#### Пример установки основной дефолтной микропрограммы ("прошивки") с помощью avrdude и загрузчика без использования программатора

`avrdude -p m8 -c usbasp -D -U flash:w:<имя_файла.hex>`

`avrdude -p m8 -c usbasp -D -U eeprom:w:<имя_файла.eep>`

Обратите внимание, что при загрузке файла-программы fuse-биты не
устанавливаются, так как используются текущие от bootloader.

## Ссылки

[Исходные тексты и сборки загрузчика и дефолтной микропрограммы
("прошивки")](https://github.com/znoxx/ARCAdaptor)

## Отказ от ответственности


Авторы проекта не несут ни малейшей ответственности за последствия,
наступившие в результате использования ARCAdaptor, данной документации,
программного обеспечения, а также любых относящихся к проекту частей.
Все, что вы делаете, вы делаете на свой страх и риск и ради собственного
удовольствия. Также авторы не несут ответственности за ошибки в
аппаратном и программном обеспечении как самого устройства ARCAdaptor,
так и любых относящихся к нему программных продуктов и документации.
